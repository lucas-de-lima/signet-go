// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/v1/spec.proto

package signetv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SignetPayload define o conjunto de claims (reivindicações) que constituem
// a identidade da aplicação e os metadados do token.
type SignetPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// (exp) Expiration Time: O tempo, em segundos no formato Unix Timestamp,
	// após o qual o token NÃO DEVE ser aceito para processamento.
	// A validação deste campo é obrigatória.
	Exp int64 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	// (iat) Issued At: O tempo, em segundos no formato Unix Timestamp,
	// em que o token foi emitido. Pode ser usado para determinar a idade do token.
	// A validação deste campo é obrigatória.
	Iat int64 `protobuf:"varint,2,opt,name=iat,proto3" json:"iat,omitempty"`
	// (sub) Subject: O principal que é o sujeito do token. Geralmente,
	// representa o ID do usuário ou do serviço. Sua interpretação é
	// específica para a aplicação.
	Sub string `protobuf:"bytes,3,opt,name=sub,proto3" json:"sub,omitempty"`
	// (aud) Audience: O(s) destinatário(s) para o(s) qual(is) o token se destina.
	// O validador DEVE verificar se ele se identifica como parte desta audiência.
	// Se a audiência não corresponder, o token DEVE ser rejeitado.
	Aud string `protobuf:"bytes,4,opt,name=aud,proto3" json:"aud,omitempty"`
	// (sid) Session ID: Um identificador único para o token, usado para
	// possibilitar a revogação. REQUERIDO para o perfil STATEFUL.
	// O formato recomendado é um ULID ou UUIDv7 de 16 bytes para garantir
	// unicidade e ordenação.
	Sid []byte `protobuf:"bytes,5,opt,name=sid,proto3" json:"sid,omitempty"`
	// Um mapa para claims customizados de natureza simples (chave-valor).
	// Útil para adicionar contexto específico da aplicação sem alterar o schema.
	CustomClaims map[string]string `protobuf:"bytes,6,rep,name=custom_claims,json=customClaims,proto3" json:"custom_claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Uma lista de strings para representar papéis (roles) ou escopos (scopes)
	// associados ao sujeito.
	Roles []string `protobuf:"bytes,7,rep,name=roles,proto3" json:"roles,omitempty"`
	// (kid) Key ID: Um identificador opcional para a chave usada para assinar o token.
	// Ajuda o validador a selecionar a chave pública correta para verificação.
	Kid           string `protobuf:"bytes,8,opt,name=kid,proto3" json:"kid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignetPayload) Reset() {
	*x = SignetPayload{}
	mi := &file_proto_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignetPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignetPayload) ProtoMessage() {}

func (x *SignetPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignetPayload.ProtoReflect.Descriptor instead.
func (*SignetPayload) Descriptor() ([]byte, []int) {
	return file_proto_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *SignetPayload) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *SignetPayload) GetIat() int64 {
	if x != nil {
		return x.Iat
	}
	return 0
}

func (x *SignetPayload) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *SignetPayload) GetAud() string {
	if x != nil {
		return x.Aud
	}
	return ""
}

func (x *SignetPayload) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SignetPayload) GetCustomClaims() map[string]string {
	if x != nil {
		return x.CustomClaims
	}
	return nil
}

func (x *SignetPayload) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *SignetPayload) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

// SignetToken é a estrutura final que é serializada para bytes e transportada.
// Ela encapsula o payload e a assinatura, garantindo a integridade dos dados.
type SignetToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// O payload serializado da mensagem SignetPayload.
	// Este campo contém a informação de identidade real.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// A assinatura digital dos bytes do campo 'payload'.
	// O algoritmo utilizado é definido pela especificação (Ed25519 para a v1.0).
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignetToken) Reset() {
	*x = SignetToken{}
	mi := &file_proto_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignetToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignetToken) ProtoMessage() {}

func (x *SignetToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignetToken.ProtoReflect.Descriptor instead.
func (*SignetToken) Descriptor() ([]byte, []int) {
	return file_proto_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *SignetToken) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SignetToken) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_proto_v1_spec_proto protoreflect.FileDescriptor

const file_proto_v1_spec_proto_rawDesc = "" +
	"\n" +
	"\x13proto/v1/spec.proto\x12\tsignet.v1\"\xa3\x02\n" +
	"\rSignetPayload\x12\x10\n" +
	"\x03exp\x18\x01 \x01(\x03R\x03exp\x12\x10\n" +
	"\x03iat\x18\x02 \x01(\x03R\x03iat\x12\x10\n" +
	"\x03sub\x18\x03 \x01(\tR\x03sub\x12\x10\n" +
	"\x03aud\x18\x04 \x01(\tR\x03aud\x12\x10\n" +
	"\x03sid\x18\x05 \x01(\fR\x03sid\x12O\n" +
	"\rcustom_claims\x18\x06 \x03(\v2*.signet.v1.SignetPayload.CustomClaimsEntryR\fcustomClaims\x12\x14\n" +
	"\x05roles\x18\a \x03(\tR\x05roles\x12\x10\n" +
	"\x03kid\x18\b \x01(\tR\x03kid\x1a?\n" +
	"\x11CustomClaimsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"E\n" +
	"\vSignetToken\x12\x18\n" +
	"\apayload\x18\x01 \x01(\fR\apayload\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignatureB\x95\x01\n" +
	"\rcom.signet.v1B\tSpecProtoP\x01Z4github.com/lucas-de-lima/signet-go/proto/v1;signetv1\xa2\x02\x03SXX\xaa\x02\tSignet.V1\xca\x02\tSignet\\V1\xe2\x02\x15Signet\\V1\\GPBMetadata\xea\x02\n" +
	"Signet::V1b\x06proto3"

var (
	file_proto_v1_spec_proto_rawDescOnce sync.Once
	file_proto_v1_spec_proto_rawDescData []byte
)

func file_proto_v1_spec_proto_rawDescGZIP() []byte {
	file_proto_v1_spec_proto_rawDescOnce.Do(func() {
		file_proto_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_v1_spec_proto_rawDesc), len(file_proto_v1_spec_proto_rawDesc)))
	})
	return file_proto_v1_spec_proto_rawDescData
}

var file_proto_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_v1_spec_proto_goTypes = []any{
	(*SignetPayload)(nil), // 0: signet.v1.SignetPayload
	(*SignetToken)(nil),   // 1: signet.v1.SignetToken
	nil,                   // 2: signet.v1.SignetPayload.CustomClaimsEntry
}
var file_proto_v1_spec_proto_depIdxs = []int32{
	2, // 0: signet.v1.SignetPayload.custom_claims:type_name -> signet.v1.SignetPayload.CustomClaimsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_v1_spec_proto_init() }
func file_proto_v1_spec_proto_init() {
	if File_proto_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_v1_spec_proto_rawDesc), len(file_proto_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_v1_spec_proto_goTypes,
		DependencyIndexes: file_proto_v1_spec_proto_depIdxs,
		MessageInfos:      file_proto_v1_spec_proto_msgTypes,
	}.Build()
	File_proto_v1_spec_proto = out.File
	file_proto_v1_spec_proto_goTypes = nil
	file_proto_v1_spec_proto_depIdxs = nil
}
